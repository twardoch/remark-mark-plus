{"version":3,"file":"mdast-util-handlers.js","names":["_micromarkSyntax","require","markFromMarkdown","exports","enter","markTokenTypes","mark","token","type","children","exit","markToMarkdownHandlers","handleMark","node","_","context","safeOptions","value","containerPhrasing","before","after","markToMarkdown","handlers","unsafe","join","joinMark","left","right","parent"],"sources":["../../src/lib/mdast-util-handlers.js"],"sourcesContent":["/**\n * @fileoverview\n *   mdast-util extensions to support GFM-like mark (`==highlighted==`).\n *   Defines how to transform micromark tokens into mdast (fromMarkdown)\n *   and how to serialize mdast nodes back to markdown (toMarkdown).\n */\n\n// src/lib/mdast-util-handlers.js\nimport {types as markTokenTypes} from './micromark-syntax.js' // Our custom token type names\n\n/**\n * Extension for `mdast-util-from-markdown` to handle mark tokens.\n * @type {import('mdast-util-from-markdown').Extension}\n */\nexport const markFromMarkdown = {\n  enter: {\n    [markTokenTypes.mark] (token) {\n      this.enter({type: 'mark', children: []}, token)\n    },\n  },\n  exit: {\n    [markTokenTypes.mark] (token) {\n      this.exit(token)\n    },\n    // markText is handled by the default text processing mechanism within the parent 'mark' node.\n    // markSequence tokens are structural and typically don't need specific exit handlers\n    // unless they contribute data to the mdast node.\n  },\n}\n\n/** @type {import('mdast-util-to-markdown').Options['handlers']} */\nconst markToMarkdownHandlers = {\n  mark: handleMark,\n}\n\n/**\n * @type {import('mdast-util-to-markdown').Handle}\n * @param {any} node\n */\nfunction handleMark (node, _, context, safeOptions) {\n  const exit = context.enter('mark')\n  // `track` is important for `unsafe` patterns if content could break out.\n  // For simple \"==\", it's mainly about getting the content.\n  const value = context.containerPhrasing(node, {\n    ...safeOptions,\n    before: '=', // Unsafe if content starts with =\n    after: '=', // Unsafe if content ends with =\n  })\n  exit()\n  return `==${value}==`\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to serialize mdast `mark` nodes.\n * @type {import('mdast-util-to-markdown').Options}\n */\nexport const markToMarkdown = {\n  handlers: markToMarkdownHandlers,\n  // `unsafe` is for characters that are unsafe *at the start or end of\n  // what is currently being serialized*.\n  // When serializing the content of a `mark` node, `containerPhrasing`\n  // with `before`/`after` handles local context.\n  // The top-level `unsafe` patterns are more about how `==` itself might\n  // be problematic in broader contexts, or if the content itself could be `==`.\n  // For `==value==`, the main concern is if `value` starts/ends with `=` or contains `==`.\n  // If `value` itself contains `==`, `containerPhrasing` won't automatically\n  // escape it unless an escape is defined.\n  // This simple version assumes `value` doesn't contain unescaped `==`.\n  unsafe: [\n    // If a value starts with `==` it would form `====`.\n    // If a value ends with `==` it would form `====`.\n    // These are typically handled by the parser not recognizing `====` as a mark.\n    // The `before` and `after` in `containerPhrasing` given to `handleMark`\n    // already signal that the content is wrapped by `=`.\n  ],\n  join: [joinMark],\n}\n\n/** @type {import('mdast-util-to-markdown').Join} */\nfunction joinMark (left, right, parent, context) {\n  // This function influences how adjacent 'mark' nodes or 'mark' nodes and other\n  // phrasing content are joined during serialization.\n  // Returning `true` allows default joining behavior (e.g., adding a space\n  // between words, no space next to punctuation).\n  // Specific rules could prevent joining (return `false`) or force line breaks.\n  // For a simple 'mark' node, default behavior is usually sufficient.\n  return true\n}\n"],"mappings":";;;;;;AAQA,IAAAA,gBAAA,GAAAC,OAAA;AARA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAC8D;;AAE9D;AACA;AACA;AACA;AACO,MAAMC,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA,GAAG;EAC9BE,KAAK,EAAE;IACL,CAACC,sBAAc,CAACC,IAAI,EAAGC,KAAK,EAAE;MAC5B,IAAI,CAACH,KAAK,CAAC;QAACI,IAAI,EAAE,MAAM;QAAEC,QAAQ,EAAE;MAAE,CAAC,EAAEF,KAAK,CAAC;IACjD;EACF,CAAC;EACDG,IAAI,EAAE;IACJ,CAACL,sBAAc,CAACC,IAAI,EAAGC,KAAK,EAAE;MAC5B,IAAI,CAACG,IAAI,CAACH,KAAK,CAAC;IAClB;IACA;IACA;IACA;EACF;AACF,CAAC;;AAED;AACA,MAAMI,sBAAsB,GAAG;EAC7BL,IAAI,EAAEM;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASA,UAAUA,CAAEC,IAAI,EAAEC,CAAC,EAAEC,OAAO,EAAEC,WAAW,EAAE;EAClD,MAAMN,IAAI,GAAGK,OAAO,CAACX,KAAK,CAAC,MAAM,CAAC;EAClC;EACA;EACA,MAAMa,KAAK,GAAGF,OAAO,CAACG,iBAAiB,CAACL,IAAI,EAAE;IAC5C,GAAGG,WAAW;IACdG,MAAM,EAAE,GAAG;IAAE;IACbC,KAAK,EAAE,GAAG,CAAE;EACd,CAAC,CAAC;EACFV,IAAI,CAAC,CAAC;EACN,OAAO,KAAKO,KAAK,IAAI;AACvB;;AAEA;AACA;AACA;AACA;AACO,MAAMI,cAAc,GAAAlB,OAAA,CAAAkB,cAAA,GAAG;EAC5BC,QAAQ,EAAEX,sBAAsB;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAY,MAAM,EAAE;IACN;IACA;IACA;IACA;IACA;EAAA,CACD;EACDC,IAAI,EAAE,CAACC,QAAQ;AACjB,CAAC;;AAED;AACA,SAASA,QAAQA,CAAEC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEb,OAAO,EAAE;EAC/C;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,IAAI;AACb","ignoreList":[]}